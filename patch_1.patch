--- a/esp_lcd_touch_xpt2046.c	2023-10-24 08:04:47.286934859 +0700
+++ b/esp_lcd_touch_xpt2046.c	2023-10-24 08:07:18.470264266 +0700
@@ -17,18 +17,18 @@
 #include <memory.h>
 
 #include "sdkconfig.h"
+#include "include/esp_lcd_touch_xpt2046.h"
+#include "include/util.h"
 
 static const char *TAG = "xpt2046";
 
 enum xpt2046_registers
 {
-                        // START  ADDR  SER/  INT   VREF    ADC
-                        //              DFR   ENA   INT/EXT ENA
-    Z_VALUE_1   = 0xB1, // 1      011   0     0     0       1
-    Z_VALUE_2   = 0xC1, // 1      100   0     0     0       1
-    Y_POSITION  = 0x91, // 1      001   0     0     0       1
-    X_POSITION  = 0xD1, // 1      101   0     0     0       1
-    BATTERY     = 0xA7  // 1      010   0     1     1       1
+    Z_VALUE_1   = 0xB0,
+    Z_VALUE_2   = 0xC0,
+    Y_POSITION  = 0x90,
+    X_POSITION  = 0xD0,
+    BATTERY     = 0xA7,
 };
 
 #if CONFIG_XPT2046_ENABLE_LOCKING
@@ -40,6 +40,14 @@
 #endif
 
 static const uint16_t XPT2046_ADC_LIMIT = 4096;
+gpio_num_t gpio_irq=0;
+
+#define XPT2046_AVG 7
+uint32_t avg_buf_x[XPT2046_AVG];
+uint32_t avg_buf_y[XPT2046_AVG];
+uint8_t avg_last;
+uint32_t x_scale = 0, y_scale = 0;
+
 static esp_err_t xpt2046_read_data(esp_lcd_touch_handle_t tp);
 static bool xpt2046_get_xy(esp_lcd_touch_handle_t tp,
                            uint16_t *x, uint16_t *y,
@@ -47,6 +55,12 @@
                            uint8_t *point_num,
                            uint8_t max_point_num);
 static esp_err_t xpt2046_del(esp_lcd_touch_handle_t tp);
+static void xpt2046_avg(uint16_t *x, uint16_t *y);
+static void first_set_buf_avg(uint16_t *x, uint16_t *y);
+static void clear_set_buf_avg(void);
+
+bool isFirst = true;
+uint32_t DISP_BUF_SIZE=0;
 
 esp_err_t esp_lcd_touch_new_spi_xpt2046(const esp_lcd_panel_io_handle_t io,
                                         const esp_lcd_touch_config_t *config,
@@ -78,8 +92,12 @@
         gpio_config_t cfg;
         memset(&cfg, 0, sizeof(gpio_config_t));
         esp_rom_gpio_pad_select_gpio(config->int_gpio_num);
+        gpio_irq = config->int_gpio_num;
         cfg.pin_bit_mask = BIT64(config->int_gpio_num);
         cfg.mode = GPIO_MODE_INPUT;
+        cfg.pull_up_en = GPIO_PULLDOWN_DISABLE;
+        cfg.pull_down_en = GPIO_PULLDOWN_DISABLE;
+        cfg.intr_type = GPIO_INTR_DISABLE;
 
         // If the user has provided a callback routine for the interrupt enable
         // the interrupt mode on the negative edge.
@@ -98,6 +116,13 @@
         }
     }
 
+    //adding to define size buffer with overflow protection
+    #if CONFIG_IDF_TARGET_ESP32S3
+        DISP_BUF_SIZE = (((config->x_max)*40*3*8>(1<<18)) ? ((((1<<18)-1000)/8)/3) : (config->x_max * 40));
+    #else
+        DISP_BUF_SIZE = (((config->x_max)*40*3*8>(1<<24)) ? ((((1<<24)-1000)/8)/3) : (config->x_max * 40));
+    #endif
+
 err:
     if (ret != ESP_OK)
     {
@@ -135,6 +160,47 @@
     return ESP_OK;
 }
 
+static void xpt2046_avg(uint16_t *x, uint16_t *y)
+{
+    /*Shift out the oldest data*/
+    uint8_t i;
+    for(i = XPT2046_AVG - 1; i > 0 ; i--) {
+        avg_buf_x[i] = avg_buf_x[i - 1];
+        avg_buf_y[i] = avg_buf_y[i - 1];
+    }
+
+    /*Insert the new point*/
+    avg_buf_x[0] = *x;
+    avg_buf_y[0] = *y;
+    if(avg_last < XPT2046_AVG) avg_last++;
+
+    /*Sum the x and y coordinates*/
+    int32_t x_sum = 0;
+    int32_t y_sum = 0;
+    for(i = 0; i < avg_last ; i++) {
+        x_sum += avg_buf_x[i];
+        y_sum += avg_buf_y[i];
+    }
+
+    /*Normalize the sums*/
+    (*x) = (int32_t)x_sum / avg_last;
+    (*y) = (int32_t)y_sum / avg_last;
+}
+
+static void first_set_buf_avg(uint16_t *x, uint16_t *y)
+{
+    for(uint8_t i = 0; i<XPT2046_AVG; i++) {
+        avg_buf_x[i] = *x;
+        avg_buf_y[i] = *y;
+    }
+}
+
+static void clear_set_buf_avg()
+{
+    memset(avg_buf_x, 0, sizeof(avg_buf_x));
+    memset(avg_buf_y, 0, sizeof(avg_buf_y));
+}
+
 static esp_err_t xpt2046_read_data(esp_lcd_touch_handle_t tp)
 {
     uint16_t z1 = 0, z2 = 0, z = 0;
@@ -147,9 +213,12 @@
     // Convert the received values into a Z value.
     z = (z1 >> 3) + (XPT2046_ADC_LIMIT - (z2 >> 3));
 
+    uint8_t pin_irq = gpio_get_level(gpio_irq);
+    // ESP_LOGI(TAG, "z level : %d, irq level : %d", z, pin_irq);
+
     // If the Z (pressure) exceeds the threshold it is likely the user has
     // pressed the screen, read in and average the positions.
-    if (z >= CONFIG_XPT2046_Z_THRESHOLD)
+    if (z >= CONFIG_XPT2046_Z_THRESHOLD && pin_irq!=1)
     {
         uint16_t discard_buf = 0;
 
@@ -170,7 +239,8 @@
 #if CONFIG_XPT2046_CONVERT_ADC_TO_COORDS
             // Convert the raw ADC value into a screen coordinate and store it
             // for averaging.
-            x += ((x_temp / (double)XPT2046_ADC_LIMIT) * tp->config.x_max);
+            // x += ((x_temp / (double)XPT2046_ADC_LIMIT) * tp->config.x_max);
+            x_temp = ((x_temp / (double)XPT2046_ADC_LIMIT) * tp->config.x_max);
 #else
             // store the raw ADC values and let the user convert them to screen
             // coordinates.
@@ -186,12 +256,30 @@
 #if CONFIG_XPT2046_CONVERT_ADC_TO_COORDS
             // Convert the raw ADC value into a screen coordinate and store it
             // for averaging.
-            y += ((y_temp / (double)XPT2046_ADC_LIMIT) * tp->config.y_max);
+            // y += ((y_temp / (double)XPT2046_ADC_LIMIT) * tp->config.y_max);
+            y_temp = ((y_temp / (double)XPT2046_ADC_LIMIT) * tp->config.y_max);
 #else
             // store the raw ADC values and let the user convert them to screen
             // coordinates.
             y += y_temp;
 #endif // CONFIG_XPT2046_CONVERT_ADC_TO_COORDS
+            if(isFirst)
+            {
+                ESP_RETURN_ON_ERROR(xpt2046_read_register(tp, X_POSITION, &x_temp),
+                                TAG, "XPT2046 read error!");
+                ESP_RETURN_ON_ERROR(xpt2046_read_register(tp, Y_POSITION, &y_temp),
+                                TAG, "XPT2046 read error!");
+                x_temp >>= 3;
+                y_temp >>= 3;
+                x_temp = ((x_temp / (double)XPT2046_ADC_LIMIT) * tp->config.x_max);
+                y_temp = ((y_temp / (double)XPT2046_ADC_LIMIT) * tp->config.y_max);
+                isFirst = false;
+                first_set_buf_avg(&x_temp, &y_temp);
+            }
+            xpt2046_avg(&x_temp, &y_temp);
+            //this value is trial and error experiment on lcd touch
+            x = (uint16_t)scale(x_temp,18,218,10,230);
+            y = (uint16_t)scale(y_temp,20,290,5,290);
         }
 
         // Average the accumulated coordinate data points.
@@ -199,6 +287,14 @@
         y /= CONFIG_ESP_LCD_TOUCH_MAX_POINTS;
         point_count = 1;
     }
+    if (pin_irq == 1)
+    {
+        if(isFirst==false)
+        {
+            clear_set_buf_avg();
+            isFirst = true;
+        }
+    }
 
     XPT2046_LOCK(&tp->data.lock);
     tp->data.coords[0].x = x;
@@ -206,6 +302,8 @@
     tp->data.coords[0].strength = z;
     tp->data.points = point_count;
     XPT2046_UNLOCK(&tp->data.lock);
+    // printf("avg buf: %ld %ld %ld %ld\r\n", avg_buf_x[0], avg_buf_x[1], avg_buf_x[2], avg_buf_x[3]);
+    // ESP_LOGI(TAG,"isFirst : %d", isFirst);
 
     return ESP_OK;
 }
@@ -253,21 +351,3 @@
 
     return (*point_num > 0);
 }
-
-esp_err_t esp_lcd_touch_xpt2046_read_battery_level(const esp_lcd_touch_handle_t handle, float *output)
-{
-    uint16_t level;
-    ESP_RETURN_ON_ERROR(xpt2046_read_register(handle, BATTERY, &level), TAG, "XPT2046 read error!");
-    
-    // battery voltage is reported as 1/4 the actual voltage due to logic in
-    // the chip.
-    *output = level * 4.0;
-
-    // adjust for internal vref of 2.5v
-    *output *= 2.5f;
-
-    // adjust for ADC bit count
-    *output /= 4096.0f;
-
-    return ESP_OK;
-}
